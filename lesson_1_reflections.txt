How did viewing a diff between two versions of a file help you see the bug that was introduced?

Because it spotted the differences between the original file and the new one, making more evident the error

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

We can detect where in history of the file an error was introduced

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Because the files in the code are related, but in the Google Docs they aren't

How can you use the commands git log and git diff to view the history of files?

log provides the list of commits, and diff the difference between them

How might using version control make you more confident to make changes that could break something?

Nothing will actually happen since I can always go back to the previous version without the bug

Now that you have your workspace set up, what do you want to try using Git for?

For the development of a colaborative project with some colleagues

What happens when you initialize a repository? Why do you need to do it?

Git will create the .git directory and initialize it in order to allow the tracking of changes

How is the staging area different from the working directory and the repository? What value do you think it offers?

It is a intermediate space where you can arrange what should be committed to the repository, maintaining the working directory and the repository separated.

How can you use the staging area to make sure you have one commit per logical change?

By chacking in it with git diff that there are only the affected files of the logical change

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When we want to experiment new features or make changes that we are not sure they will work.
Branches allow to keep separated all the versions

How do the diagrams help you visualize the branch structure?

it clarifies which branches are, to where I am commiting, and what would happen if I generate a new commit

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A single branch that contains the code of both. To be clear who is parent of who

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?


